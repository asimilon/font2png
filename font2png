#!/usr/bin/python3

import sys, getopt
import os.path
try:
	from PIL import Image
	from PIL import ImageDraw
	from PIL import ImageFont
except ImportError:
	print('Requires Pillow (PIL Fork) module to be installed, see https://pillow.readthedocs.io/en/latest/installation.html')
	sys.exit(1)

def showHelp():
	print("font2png -f <font file> -o <output file> -w <width> -l -s <scale> -m -d -i <index> -h")
	print("  --font=<font file>        (-f) - font to use (ttf or otf)")
	print("  --output=<output file>    (-o) - PNG file to be output")
	print("  --width=<num. pixels>     (-w) - width in pixels of output (minimum 8 pixels)")
	print("  --left-align              (-l) - left align the font (default centred)")
	print("  --scale                   (-s) - font scale relative to width (defult 1.0)")
	print("  --mono                    (-m) - output as monochrome")
	print("  --defines                 (-d) - output letter widths to stdout")
	print("  --quantise=<num. colours> (-q) - quantise colours to number specified")
	print("  --index=<face index>      (-i) - which font face to load (default first available face)")
	print("  --help                    (-h) - show usage")
	print()

def doOutput(fontfile, outfile, width, leftalign, scale, monochrome, defs, quantise, index):
	fnt = ImageFont.truetype(fontfile, round(width*scale), index)
	img = Image.new('RGBA', (width,width*(127-32)))
	i = 0
	widths = []

	xpos = 0 if leftalign else width/2
	anch = 'lm' if leftalign else 'mm'

	for letter in range(32,127):
		letterImg = Image.new('RGBA', (width,width), color=(0,0,0))
		draw = ImageDraw.Draw(letterImg)
		draw.text((xpos, width/2), chr(letter), anchor=anch, fill=(255,255,255), font=fnt)
		if monochrome:
			letterImg = letterImg.quantize(2)
		elif not quantise == 0:
			letterImg = letterImg.quantize(quantise)
		img.paste(letterImg, (0,i*width))
		if defs:
			let2col = letterImg.convert(mode='1')
			bbox = let2col.getbbox()
			if bbox is None:
				widths.append(0)
			else:
				if leftalign:
					widths.append(bbox[2])
				else:
					widths.append(bbox[2]-bbox[0]+1)
		i += 1

	if monochrome:
		img2col = img.convert(mode='1')
		img2col.save(outfile, "PNG")
	else:
		img.save(outfile, "PNG")

	if defs:
		widths.pop(0)
		if not leftalign:
			print("\t; these won't make much sense when font is centre aligned!")
		print("\tdc.b SPACE_WIDTH,",end="")
		print(",".join([f'{w}' for w in widths]))

def main(argv):
	fontfile = ""
	outputfile = ""
	width = 0
	alignleft = False
	scale = 1.0
	monochrome = False
	defs = False
	quant = 0
	quantOpt = False
	index = 0

	try:
		opts, args = getopt.getopt(argv,"hf:o:w:ls:mdq:i:",["font=","output=","left-align","width=","scale=","mono","defines","quantise=","index=","help"])
	except getopt.GetoptError as err:
		showHelp()
		print(err)
		sys.exit(2)
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			showHelp()
			sys.exit()
		elif opt in ("-f", "--font"):
			fontfile = os.path.expanduser(arg)
		elif opt in ("-o", "--output"):
			outputfile = os.path.expanduser(arg)
		elif opt in ("-l", "--left-align"):
			alignleft = True
		elif opt in ("-w", "--width"):
			width = int(arg)
		elif opt in ("-s", "--scale"):
			scale = float(arg)
		elif opt in ("-m", "--mono"):
			monochrome = True
		elif opt in ("-d", "--defines"):
			defs = True
		elif opt in ("-q", "--quantise"):
			quant = int(arg)
			quantOpt = True
		elif opt in ("-i", "--index"):
			index = int(arg)
	if fontfile == "":
		showHelp()
		print("Must specify font file!")
		sys.exit(2)
	if outputfile == "":
		showHelp()
		print("Must specify output file!")
		sys.exit(2)
	if width < 8:
		showHelp()
		print("Width is too small!")
		sys.exit(2)
	if scale == 0:
		showHelp()
		print("Scale cannot be zero!")
		sys.exit(2)
	if (quantOpt and quant < 2) or (quantOpt and quant > 255):
		showHelp()
		print("Quantise must be in the range 2 to 255!")
		sys.exit(2)

	doOutput(fontfile,outputfile,width,alignleft,scale,monochrome,defs,quant,index)

if __name__ == "__main__":
	main(sys.argv[1:])
